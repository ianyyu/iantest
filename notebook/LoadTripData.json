{
	"name": "LoadTripData",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "contosospark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2
		},
		"metadata": {
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/58f8824d-32b0-4825-9825-02fa6a801546/resourceGroups/Contoso/providers/Microsoft.Synapse/workspaces/contosoanalytics/bigDataPools/contosospark",
				"name": "contosospark",
				"type": "Spark",
				"endpoint": "https://contosoanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/contosospark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"%%pyspark\n",
					"trip_df = spark.read.load('abfss://datasets@contosolake.dfs.core.windows.net/nyctaxismall/Trip.parquet', format='parquet')\n",
					"date_df = spark.read.load('abfss://datasets@contosolake.dfs.core.windows.net/nyctaxismall/dimDate.parquet', format='parquet')\n",
					"date_df.show(10)\n",
					"display(trip_df.take(10))"
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"prepped_df = trip_df.select('PassengerCount')\\\n",
					"                    .filter((trip_df.TripDistanceMiles > 0) & (trip_df.PassengerCount > 0))\\\n",
					"                    .groupBy(trip_df.PassengerCount)#\\\n",
					"                    #.orderBy(trip_df.PassengerCount)\n",
					"\n",
					"display(prepped_df)\n",
					"#taxi_df = sampled_taxi_df.select('totalAmount', 'fareAmount', 'tipAmount', 'paymentType', 'rateCodeId', 'passengerCount'\\\n",
					"#                                , 'tripDistance', 'tpepPickupDateTime', 'tpepDropoffDateTime'\\\n",
					"#                                , date_format('tpepPickupDateTime', 'hh').alias('pickupHour')\\\n",
					"#                                , date_format('tpepPickupDateTime', 'EEEE').alias('weekdayString')\\\n",
					"#                                , (unix_timestamp(col('tpepDropoffDateTime')) - unix_timestamp(col('tpepPickupDateTime'))).alias('tripTimeSecs')\\\n",
					"#                                , (when(col('tipAmount') > 0, 1).otherwise(0)).alias('tipped')\n",
					"#                                )\\\n",
					"#%%sql\n",
					"#SELECT  \n",
					"#    PassengerCount, \n",
					"#    SUM(TripDistanceMiles) as SumTripDistance,\n",
					"#    AVG(TripDistanceMiles) as AvgTripDistance\n",
					"#FROM    \n",
					"#    trip_df t\n",
					"#WHERE   \n",
					"#    TripDistanceMiles > 0 AND PassengerCount > 0\n",
					"#GROUP BY \n",
					"#    PassengerCount\n",
					"#ORDER BY \n",
					"#    PassengerCount"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"source": [
					"trip_df.createOrReplaceTempView('trip_df')\n",
					"date_df.createOrReplaceTempView('date_df')\n",
					""
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"outputCollapsed": true
				},
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    *\n",
					"FROM\n",
					"    trip_df"
				],
				"execution_count": 24
			},
			{
				"cell_type": "code",
				"metadata": {
					"outputCollapsed": true
				},
				"source": [
					"%%sql\n",
					"SELECT \n",
					"    count(*), date_df.Date\n",
					"FROM\n",
					"    trip_df, date_df\n",
					"WHERE\n",
					"    TripDistanceMiles > 0 AND TripDistanceMiles <= 100 AND\n",
					"    date_df.DateID = trip_df.DateID\n",
					"GROUP BY \n",
					"    date_df.Date\n",
					"ORDER BY \n",
					"    date_df.Date"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"source": [
					"%%sql\n",
					"SELECT  \n",
					"    PassengerCount, \n",
					"    SUM(TripDistanceMiles) as SumTripDistance,\n",
					"    AVG(TripDistanceMiles) as AvgTripDistance\n",
					"FROM    \n",
					"    trip_df t\n",
					"WHERE   \n",
					"    TripDistanceMiles > 0 AND PassengerCount > 0\n",
					"GROUP BY \n",
					"    PassengerCount\n",
					"ORDER BY \n",
					"    PassengerCount"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"%%sql\n",
					"SELECT     \n",
					"--    PassengerCount,\n",
					"    SUM(TripDistanceMiles) AS SumTripDistance,\n",
					"    AVG(TripDistanceMiles) AS AvgTripDistance,\n",
					"FROM\n",
					"    trip_df\n",
					"    -- t, date_df d\n",
					"    --INNER JOIN d ON t.DateID == d.DateID\n",
					"--GROUP BY\n",
					"  --  PassengerCount\n",
					"--ORDER BY    \n",
					"  --  d.Date"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"source": [
					"%%sql\n",
					"SELECT\n",
					"    VendorId,\n",
					"    PaymentType,\n",
					"    SUM(TripDistance),\n",
					"    SUM(FareAmount),\n",
					"    AVG(FareAmount)\n",
					"FROM\n",
					"    trip_df\n",
					"WHERE\n",
					"    VendorId IN ('CMT','VTS') AND\n",
					"    PassengerCount > 0 AND\n",
					"    TripDistanceMiles > 0 AND TripDistanceMiles <= 100\n",
					"GROUP BY\n",
					"    VendorId,\n",
					"    PaymentType"
				],
				"execution_count": null
			}
		]
	}
}